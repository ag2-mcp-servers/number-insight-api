# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:36:18+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import BaseModel, Field, RootModel, constr


class NiAsyncResponse(BaseModel):
    id: int
    name: str
    tag: Optional[str] = None


class NiBasicStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_9 = 9


class CallerType(Enum):
    business = 'business'
    consumer = 'consumer'
    unknown = 'unknown'


class NiCallerIdentity(BaseModel):
    caller_name: Optional[str] = Field(
        None,
        description='Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John Smith'],
    )
    caller_type: Optional[CallerType] = Field(
        None,
        description='The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['consumer'],
    )
    first_name: Optional[str] = Field(
        None,
        description='First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John'],
    )
    last_name: Optional[str] = Field(
        None,
        description='Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['Smith'],
    )


class NetworkType(Enum):
    mobile = 'mobile'
    landline = 'landline'
    landline_premium = 'landline_premium'
    landline_tollfree = 'landline_tollfree'
    virtual = 'virtual'
    unknown = 'unknown'
    pager = 'pager'
    null = 'null'


class NiCurrentCarrierProperties(BaseModel):
    country: Optional[str] = Field(
        None,
        description='The country that `number` is associated with. This is in ISO 3166-1 alpha-2   format.',
        examples=['GB'],
    )
    name: Optional[str] = Field(
        None,
        description='The full name of the carrier that `number` is associated with.',
        examples=['Acme Inc'],
    )
    network_code: Optional[str] = Field(
        None,
        description='The [https://en.wikipedia.org/wiki/Mobile_country_code](https://en.wikipedia.org/wiki/Mobile_country_code) for the carrier`number` is associated with. Unreal numbers are marked as`null` and the request is rejected altogether if the number is impossible according to the [E.164](https://en.wikipedia.org/wiki/E.164) guidelines.',
        examples=['12345'],
    )
    network_type: Optional[NetworkType] = Field(
        None,
        description='The type of network that `number` is associated with.',
        examples=['mobile'],
    )


class NiInitialCarrierProperties(BaseModel):
    country: Optional[str] = Field(
        None,
        description='The country that `number` is associated with. This is in ISO 3166-1 alpha-2   format.',
        examples=['GB'],
    )
    name: Optional[str] = Field(
        None,
        description='The full name of the carrier that `number` is associated with.',
        examples=['Acme Inc'],
    )
    network_code: Optional[str] = Field(
        None,
        description='The [https://en.wikipedia.org/wiki/Mobile_country_code](https://en.wikipedia.org/wiki/Mobile_country_code) for the carrier`number` is associated with. Unreal numbers are marked as`null` and the request is rejected altogether if the number is impossible according to the [E.164](https://en.wikipedia.org/wiki/E.164) guidelines.',
        examples=['12345'],
    )
    network_type: Optional[NetworkType] = Field(
        None,
        description='The type of network that `number` is associated with.',
        examples=['mobile'],
    )


class NiRealtimeData(BaseModel):
    active_status: Optional[str] = Field(
        None,
        description="Whether the end-user's phone number is active within an operator's `network`. Can be `active`, `inactive` or null.",
        examples=['true'],
    )
    handset_status: Optional[str] = Field(
        None,
        description="Whether the end-user's handset is turned on or off.",
        examples=['On'],
    )


class LookupOutcome(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class Ported(Enum):
    unknown = 'unknown'
    ported = 'ported'
    not_ported = 'not_ported'
    assumed_not_ported = 'assumed_not_ported'
    assumed_ported = 'assumed_ported'
    null = 'null'


class Reachable(Enum):
    unknown = 'unknown'
    reachable = 'reachable'
    undeliverable = 'undeliverable'
    absent = 'absent'
    bad_number = 'bad_number'
    blacklisted = 'blacklisted'
    null = 'null'


class ValidNumber(Enum):
    unknown = 'unknown'
    valid = 'valid'
    not_valid = 'not_valid'
    inferred = 'inferred'
    inferred_not_valid = 'inferred_not_valid'


class Roaming(Enum):
    unknown = 'unknown'


class NiResponseJsonBasic(BaseModel):
    country_code: Optional[constr(pattern=r'[A-Z]{2}')] = Field(
        None,
        description='Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.',
        examples=['GB'],
    )
    country_code_iso3: Optional[constr(pattern=r'[A-Z]{3}')] = Field(
        None,
        description='Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.',
        examples=['GBR'],
    )
    country_name: Optional[str] = Field(
        None,
        description='The full name of the country that `number` is registered in.',
        examples=['United Kingdom'],
    )
    country_prefix: Optional[str] = Field(
        None,
        description='The numeric prefix for the country that `number` is registered in.',
        examples=['44'],
    )
    international_format_number: Optional[str] = Field(
        None,
        description='The `number` in your request in international format.',
        examples=['447700900000'],
    )
    national_format_number: Optional[str] = Field(
        None,
        description='The `number` in your request in the format used by the country the number belongs to.',
        examples=['07700 900000'],
    )
    request_id: Optional[constr(max_length=40)] = Field(
        None,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )
    status: Optional[NiBasicStatus] = None
    status_message: Optional[str] = Field(
        None,
        description='The status description of your request.',
        examples=['Success'],
    )


class NiResponseJsonStandard(NiResponseJsonBasic):
    caller_identity: Optional[NiCallerIdentity] = None
    caller_name: Optional[str] = Field(
        None,
        description='Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John Smith'],
    )
    caller_type: Optional[CallerType] = Field(
        None,
        description='The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['consumer'],
    )
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    first_name: Optional[str] = Field(
        None,
        description='First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John'],
    )
    last_name: Optional[str] = Field(
        None,
        description='Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['Smith'],
    )
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[Ported] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
        examples=['not_ported'],
    )
    refund_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_price: Optional[str] = Field(
        None,
        description='The amount in EUR charged to your account.',
        examples=['0.04000000'],
    )


class NiResponseJsonStandardRoamingUnknown(NiResponseJsonBasic):
    caller_identity: Optional[NiCallerIdentity] = None
    caller_name: Optional[str] = Field(
        None,
        description='Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John Smith'],
    )
    caller_type: Optional[CallerType] = Field(
        None,
        description='The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['consumer'],
    )
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    first_name: Optional[str] = Field(
        None,
        description='First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John'],
    )
    last_name: Optional[str] = Field(
        None,
        description='Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['Smith'],
    )
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[Ported] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
        examples=['not_ported'],
    )
    refund_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_price: Optional[str] = Field(
        None,
        description='The amount in EUR charged to your account.',
        examples=['0.04000000'],
    )


class CallerIdentity(BaseModel):
    caller_name: Optional[str] = Field(
        None,
        alias='caller-name',
        description='Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John Smith'],
    )
    caller_type: Optional[CallerType] = Field(
        None,
        alias='caller-type',
        description='The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['consumer'],
    )
    first_name: Optional[str] = Field(
        None,
        alias='first-name',
        description='First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John'],
    )
    last_name: Optional[str] = Field(
        None,
        alias='last-name',
        description='Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['Smith'],
    )


class Error(BaseModel):
    code: Optional[str] = Field(None, description='The status code', examples=[0])
    status_text: Optional[str] = Field(
        None,
        description='The status description of your request.',
        examples=['Success'],
    )


class LocalNumber(BaseModel):
    country_code: Optional[constr(pattern=r'[A-Z]{2}')] = Field(
        None,
        description='Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.',
        examples=['GB'],
    )
    country_code_iso3: Optional[constr(pattern=r'[A-Z]{3}')] = Field(
        None,
        description='Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.',
        examples=['GBR'],
    )
    country_name: Optional[str] = Field(
        None,
        description='The full name of the country that `number` is registered in.',
        examples=['United Kingdom'],
    )
    country_prefix: Optional[str] = Field(
        None,
        description='The numeric prefix for the country that `number` is registered in.',
        examples=['44'],
    )
    number: Optional[str] = Field(
        None,
        description='The `number` in your request in the format used by the country the number belongs to.',
        examples=['07700 900000'],
    )


class Code(Enum):
    int_0 = 0
    int_1 = 1
    int_2 = 2


class LookupOutcome3(BaseModel):
    code: Optional[Code] = Field(
        None,
        description='Shows if all information about a phone number has been returned. Possible values:\n\nCode | Text\n-- | --\n0 | Success\n1 | Partial success - some fields populated\n2 | Failed\n',
        examples=['0'],
    )
    lookup_outcome_message: Optional[str] = Field(
        None,
        description='Shows if all information about a phone number has been returned.',
        examples=['Success'],
    )


class PortedMessage(Enum):
    unknown = 'unknown'
    ported = 'ported'
    not_ported = 'not_ported'
    assumed_not_ported = 'assumed_not_ported'
    assumed_ported = 'assumed_ported'


class Ported5(BaseModel):
    ported_message: Optional[PortedMessage] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
        examples=['not_ported'],
    )


class ValidNumber3(Enum):
    unknown = 'unknown'
    valid = 'valid'
    not_valid = 'not_valid'
    inferred_not_valid = 'inferred_not_valid'


class NiResponseXmlBasic(BaseModel):
    error: Optional[Error] = Field(
        None, description='The error code and status of your request'
    )
    international_format_number: Optional[str] = Field(
        None,
        description='The `number` in your request in international format.',
        examples=['447700900000'],
    )
    local_number: Optional[LocalNumber] = Field(
        None,
        description='An object containing the `number` in your request in the format used by the country the number belongs to.',
    )
    request_id: Optional[constr(max_length=40)] = Field(
        None,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )


class CallerType1(Enum):
    business = 'business'
    consumer = 'consumer'
    unknown = 'unknown'


class CallerIdentity1(BaseModel):
    caller_name: Optional[str] = Field(
        None,
        alias='caller-name',
        description='Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John Smith'],
    )
    caller_type: Optional[CallerType] = Field(
        None,
        alias='caller-type',
        description='The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['consumer'],
    )
    caller_name_1: Optional[str] = Field(
        None,
        alias='caller_name',
        description='Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John Smith'],
    )
    caller_type_1: Optional[CallerType1] = Field(
        None,
        alias='caller_type',
        description='The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['consumer'],
    )
    firs_name: Optional[str] = Field(
        None,
        description='First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John'],
    )
    first_name: Optional[str] = Field(
        None,
        alias='first-name',
        description='First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John'],
    )
    last_name: Optional[str] = Field(
        None,
        alias='last-name',
        description='Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['Smith'],
    )
    last_name_1: Optional[str] = Field(
        None,
        alias='last_name',
        description='Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['Smith'],
    )


class Ported6(BaseModel):
    ported_message: Optional[PortedMessage] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
        examples=['not_ported'],
    )


class NiResponseXmlStandard(BaseModel):
    caller_identity: Optional[CallerIdentity1] = Field(
        None,
        description='Contains details of the number owner, if `cnam` was set to `true` in the request.',
    )
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    error: Optional[Error] = Field(
        None, description='The error code and status of your request'
    )
    international_format_number: Optional[str] = Field(
        None,
        description='The `number` in your request in international format.',
        examples=['447700900000'],
    )
    local_number: Optional[LocalNumber] = Field(
        None,
        description='An object containing the `number` in your request in the format used by the country the number belongs to.',
    )
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[Ported6] = Field(
        None,
        description='If the user has changed carrier for number. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported',
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_id: Optional[constr(max_length=40)] = Field(
        None,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )
    request_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )


class Status(Enum):
    roaming = 'roaming'
    not_roaming = 'not_roaming'


class NiRoaming(BaseModel):
    roaming_country_code: Optional[str] = Field(
        None,
        description='If `number` is `roaming`, this is the [code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country `number` is roaming in.',
        examples=['US'],
    )
    roaming_network_code: Optional[str] = Field(
        None,
        description='If `number` is `roaming`, this is the id of the carrier network `number` is roaming in.',
        examples=['12345'],
    )
    roaming_network_name: Optional[str] = Field(
        None,
        description='If `number` is `roaming`, this is the name of the carrier network `number` is roaming in.',
        examples=['Acme Inc'],
    )
    status: Optional[Status] = Field(
        None,
        description='Is `number` outside its home carrier network.',
        examples=['roaming'],
    )


class NiStandardAdvancedStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_9 = 9
    integer_19 = 19
    integer_43 = 43
    integer_44 = 44
    integer_45 = 45
    integer_999 = 999


class Format(Enum):
    json = 'json'
    xml = 'xml'


class StandardFormatGetResponse(RootModel[NiResponseJsonStandard]):
    root: NiResponseJsonStandard


class NiResponseAsync(BaseModel):
    error_text: Optional[str] = Field(
        None,
        description='The status description of your request. Note: This field is equivalent to `status_message` field in the other endpoints',
        examples=['Success'],
    )
    number: Optional[str] = Field(
        None, description='The `number` in your request', examples=['447700900000']
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_id: Optional[constr(max_length=40)] = Field(
        None,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )
    request_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )
    status: Optional[NiStandardAdvancedStatus] = None


class NiResponseJsonAdvancedAsync(BaseModel):
    caller_identity: Optional[NiCallerIdentity] = None
    country_code: constr(pattern=r'[A-Z]{2}') = Field(
        ...,
        description='Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.',
        examples=['GB'],
    )
    country_code_iso3: constr(pattern=r'[A-Z]{3}') = Field(
        ...,
        description='Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.',
        examples=['GBR'],
    )
    country_name: str = Field(
        ...,
        description='The full name of the country that `number` is registered in.',
        examples=['United Kingdom'],
    )
    country_prefix: str = Field(
        ...,
        description='The numeric prefix for the country that `number` is registered in.',
        examples=['44'],
    )
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    international_format_number: str = Field(
        ...,
        description='The `number` in your request in international format.',
        examples=['447700900000'],
    )
    lookup_outcome: Optional[LookupOutcome] = Field(
        None,
        description='Shows if all information about a phone number has been returned. Possible values:\n\nCode | Text\n--- | ---\n0 | Success\n1 | Partial success - some fields populated\n2 | Failed\n',
        examples=[0],
    )
    lookup_outcome_message: Optional[str] = Field(
        None,
        description='Shows if all information about a phone number has been returned.',
        examples=['Success'],
    )
    national_format_number: str = Field(
        ...,
        description='The `number` in your request in the format used by the country the number belongs to.',
        examples=['07700 900000'],
    )
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[Ported] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
        examples=['not_ported'],
    )
    reachable: Optional[Reachable] = Field(
        None,
        description='Can you call `number` now. This is applicable to mobile numbers only.',
        examples=['reachable'],
    )
    refund_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_id: constr(max_length=40) = Field(
        ...,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )
    request_price: Optional[str] = Field(
        None,
        description='The amount in EUR charged to your account.',
        examples=['0.04000000'],
    )
    roaming: Optional[NiRoaming] = None
    status: NiStandardAdvancedStatus
    status_message: str = Field(
        ..., description='The status description of your request.', examples=['Success']
    )
    valid_number: Optional[ValidNumber] = Field(
        None,
        description='Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.',
        examples=['valid'],
    )


class NiResponseJsonAdvancedRoamingUnknown(BaseModel):
    caller_identity: Optional[NiCallerIdentity] = None
    country_code: constr(pattern=r'[A-Z]{2}') = Field(
        ...,
        description='Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.',
        examples=['GB'],
    )
    country_code_iso3: constr(pattern=r'[A-Z]{3}') = Field(
        ...,
        description='Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.',
        examples=['GBR'],
    )
    country_name: str = Field(
        ...,
        description='The full name of the country that `number` is registered in.',
        examples=['United Kingdom'],
    )
    country_prefix: str = Field(
        ...,
        description='The numeric prefix for the country that `number` is registered in.',
        examples=['44'],
    )
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    international_format_number: str = Field(
        ...,
        description='The `number` in your request in international format.',
        examples=['447700900000'],
    )
    lookup_outcome: Optional[LookupOutcome] = Field(
        None,
        description='Shows if all information about a phone number has been returned. Possible values:\n\nCode | Text\n--- | ---\n0 | Success\n1 | Partial success - some fields populated\n2 | Failed\n',
        examples=[0],
    )
    lookup_outcome_message: Optional[str] = Field(
        None,
        description='Shows if all information about a phone number has been returned.',
        examples=['Success'],
    )
    national_format_number: str = Field(
        ...,
        description='The `number` in your request in the format used by the country the number belongs to.',
        examples=['07700 900000'],
    )
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[Ported] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
        examples=['not_ported'],
    )
    reachable: Optional[Reachable] = Field(
        None,
        description='Can you call `number` now. This is applicable to mobile numbers only.',
        examples=['reachable'],
    )
    refund_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_id: constr(max_length=40) = Field(
        ...,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )
    request_price: Optional[str] = Field(
        None,
        description='The amount in EUR charged to your account.',
        examples=['0.04000000'],
    )
    roaming: Optional[Roaming] = Field(None, examples=['unknown'])
    status: NiStandardAdvancedStatus
    status_message: str = Field(
        ..., description='The status description of your request.', examples=['Success']
    )
    valid_number: Optional[ValidNumber] = Field(
        None,
        description='Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.',
        examples=['valid'],
    )


class NiResponseJsonAdvancedSync(BaseModel):
    caller_identity: Optional[NiCallerIdentity] = None
    country_code: constr(pattern=r'[A-Z]{2}') = Field(
        ...,
        description='Two character country code for `number`. This is in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.',
        examples=['GB'],
    )
    country_code_iso3: constr(pattern=r'[A-Z]{3}') = Field(
        ...,
        description='Three character country code for `number`. This is in [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format.',
        examples=['GBR'],
    )
    country_name: str = Field(
        ...,
        description='The full name of the country that `number` is registered in.',
        examples=['United Kingdom'],
    )
    country_prefix: str = Field(
        ...,
        description='The numeric prefix for the country that `number` is registered in.',
        examples=['44'],
    )
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    international_format_number: str = Field(
        ...,
        description='The `number` in your request in international format.',
        examples=['447700900000'],
    )
    lookup_outcome: Optional[LookupOutcome] = Field(
        None,
        description='Shows if all information about a phone number has been returned. Possible values:\n\nCode | Text\n--- | ---\n0 | Success\n1 | Partial success - some fields populated\n2 | Failed\n',
        examples=[0],
    )
    lookup_outcome_message: Optional[str] = Field(
        None,
        description='Shows if all information about a phone number has been returned.',
        examples=['Success'],
    )
    national_format_number: str = Field(
        ...,
        description='The `number` in your request in the format used by the country the number belongs to.',
        examples=['07700 900000'],
    )
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[Ported] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
        examples=['not_ported'],
    )
    reachable: Optional[Reachable] = Field(
        None,
        description='Can you call `number` now. This is applicable to mobile numbers only.',
        examples=['reachable'],
    )
    real_time_data: Optional[NiRealtimeData] = None
    refund_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_id: constr(max_length=40) = Field(
        ...,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )
    request_price: Optional[str] = Field(
        None,
        description='The amount in EUR charged to your account.',
        examples=['0.04000000'],
    )
    roaming: Optional[NiRoaming] = None
    status: NiStandardAdvancedStatus
    status_message: str = Field(
        ..., description='The status description of your request.', examples=['Success']
    )
    valid_number: Optional[ValidNumber] = Field(
        None,
        description='Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.',
        examples=['valid'],
    )


class NiResponseXmlAdvanced(BaseModel):
    caller_identity: Optional[CallerIdentity] = Field(
        None,
        description='Contains details of the number owner, if `cnam` was set to `true` in the request.',
    )
    caller_name: Optional[str] = Field(
        None,
        description='Full name of the person or business who owns the phone number. `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John Smith'],
    )
    caller_type: Optional[CallerType] = Field(
        None,
        description='The value will be `business` if the owner of a phone number is a business. If the owner is an individual the value will be `consumer`. The value will be `unknown` if this information is not available. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['consumer'],
    )
    current_carrier: Optional[NiCurrentCarrierProperties] = None
    error: Optional[Error] = Field(
        None, description='The error code and status of your request'
    )
    firs_name: Optional[str] = Field(
        None,
        description='First name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['John'],
    )
    international_format_number: Optional[str] = Field(
        None,
        description='The `number` in your request in international format.',
        examples=['447700900000'],
    )
    ip_warnings: Optional[str] = Field(
        None,
        description='This property is deprecated and can safely be ignored.',
        examples=['unknown'],
    )
    last_name: Optional[str] = Field(
        None,
        description='Last name of the person who owns the phone number if the owner is an individual. This parameter is only present if `cnam` had a value of `true` within the request.',
        examples=['Smith'],
    )
    local_number: Optional[LocalNumber] = Field(
        None,
        description='An object containing the `number` in your request in the format used by the country the number belongs to.',
    )
    lookup_outcome: Optional[LookupOutcome3] = Field(
        None,
        description='An object indicating whether all information about a phone number has been returned.',
    )
    original_carrier: Optional[NiInitialCarrierProperties] = None
    ported: Optional[Ported5] = Field(
        None,
        description='If the user has changed carrier for `number`. The assumed status means that the information supplier has replied to the request but has not said explicitly that the number is ported.',
    )
    reachable: Optional[Reachable] = Field(
        None,
        description='Can you call `number` now. This is applicable to mobile numbers only.',
        examples=['reachable'],
    )
    remaining_balance: Optional[str] = Field(
        None,
        description='Your account balance in EUR after this request.',
        examples=['1.23456789'],
    )
    request_id: Optional[constr(max_length=40)] = Field(
        None,
        description='The unique identifier for your request. This is a alphanumeric string up to 40 characters.',
        examples=['aaaaaaaa-bbbb-cccc-dddd-0123456789ab'],
    )
    request_price: Optional[str] = Field(
        None,
        description='If there is an internal lookup error, the `refund_price` will reflect the lookup price. If `cnam` is requested for a non-US number the `refund_price` will reflect the `cnam` price. If both of these conditions occur, `refund_price` is the sum of the lookup price and `cnam` price.',
        examples=['0.01500000'],
    )
    roaming: Optional[NiRoaming] = None
    valid_number: Optional[ValidNumber3] = Field(
        None,
        description='Does `number` exist. `unknown` means the number could not be validated. `valid` means the number is valid. `not_valid` means the number is not valid. `inferred_not_valid` means that the number could not be determined as valid or invalid via an external system and the best guess is that the number is invalid. This is applicable to mobile numbers only.',
        examples=['valid'],
    )


class AdvancedAsyncFormatGetResponse(RootModel[NiResponseAsync]):
    root: NiResponseAsync


class AdvancedFormatGetResponse(
    RootModel[Union[NiResponseJsonAdvancedSync, NiResponseJsonAdvancedRoamingUnknown]]
):
    root: Union[NiResponseJsonAdvancedSync, NiResponseJsonAdvancedRoamingUnknown]
