# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:36:18+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from pydantic import constr

from models import (
    AdvancedAsyncFormatGetResponse,
    AdvancedFormatGetResponse,
    Format,
    NiResponseJsonBasic,
    StandardFormatGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'devrel@vonage.com',
        'name': 'Vonage DevRel',
        'url': 'https://developer.nexmo.com/',
    },
    description='The Number Insight API delivers real-time intelligence about the validity, reachability and roaming status of a phone number and tells you how to format the number correctly in your application. There are three levels of Number Insight API available: [Basic, Standard and Advanced](https://developer.nexmo.com/number-insight/overview#basic-standard-and-advanced-apis). The advanced API is available asynchronously as well as synchronously.',
    license={
        'name': 'The MIT License (MIT)',
        'url': 'https://opensource.org/licenses/MIT',
    },
    termsOfService='https://www.nexmo.com/terms-of-use',
    title='Number Insight API',
    version='1.2.1',
    servers=[{'url': 'https://api.nexmo.com/ni'}],
)


@app.get(
    '/advanced/async/{format}',
    description=""" Provides [advanced number insight](/number-insight/overview#basic-standard-and-advanced-apis) number information **asynchronously** using the URL specified in the `callback` parameter.  recommends asynchronous use of the Number Insight Advanced API, to avoid timeouts.

Note that this endpoint also supports `POST` requests.
 """,
    tags=['number_insight_operations'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def get_number_insight_async(
    callback: str,
    number: constr(pattern=r'^[0-9-+\(\)\s]*$') = ...,
    country: Optional[constr(pattern=r'[A-Z]{2}')] = None,
    cnam: Optional[bool] = False,
    ip: Optional[str] = None,
    format: Format = ...,
):
    """
    Advanced Number Insight (async)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/advanced/{format}',
    description=""" Provides [advanced number insight](/number-insight/overview#basic-standard-and-advanced-apis) information about a number synchronously, in the same way that the basic and standard endpoints do.

Vonage recommends accessing the Advanced API **asynchronously** using the `/advanced/async` endpoint, to avoid timeouts.

Note that this endpoint also supports `POST` requests.
 """,
    tags=['number_insight_operations'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def get_number_insight_advanced(
    real_time_data: Optional[bool] = None,
    number: constr(pattern=r'^[0-9-+\(\)\s]*$') = ...,
    country: Optional[constr(pattern=r'[A-Z]{2}')] = None,
    cnam: Optional[bool] = False,
    ip: Optional[str] = None,
    format: Format = ...,
):
    """
    Advanced Number Insight (sync)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/basic/{format}',
    description=""" Provides [basic number insight](/number-insight/overview#basic-standard-and-advanced-apis) information about a number.

Note that this endpoint also supports `POST` requests.
 """,
    tags=['number_insight_operations'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def get_number_insight_basic(
    number: constr(pattern=r'^[0-9-+\(\)\s]*$'),
    country: Optional[constr(pattern=r'[A-Z]{2}')] = None,
    format: Format = ...,
):
    """
    Basic Number Insight
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/standard/{format}',
    description=""" Provides [standard number insight](/number-insight/overview#basic-standard-and-advanced-apis) information about a number.

Note that this endpoint also supports `POST` requests.
 """,
    tags=['number_insight_operations'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def get_number_insight_standard(
    number: constr(pattern=r'^[0-9-+\(\)\s]*$'),
    country: Optional[constr(pattern=r'[A-Z]{2}')] = None,
    cnam: Optional[bool] = False,
    format: Format = ...,
):
    """
    Standard Number Insight
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
